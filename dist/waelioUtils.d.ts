export { _cleanResponse } from './src/utils/clean_response';
export { _equals } from './src/utils/equals';
export { _hideRandom } from './src/utils/hide_random';
export { _repeat } from './src/utils/repeat';
export { _rotateArray } from './src/utils/rotate_array';
export { _To } from './src/utils/to';
export { _Get } from './src/utils/_get';
export { a_or_an } from './src/utils/a_or_an';
export { toBase64 } from './src/utils/toBase64';
export { calculateClockDrift } from './src/utils/calculate_clock_drift';
export { camelToSnake } from './src/utils/camel_to_snake';
export { generateId } from './src/utils/generate_id';
export { isArray } from './src/utils/is_array';
export { isObject } from './src/utils/is_object';
export { isFunction } from './src/utils/is_function';
export { isString } from './src/utils/is_string';
export { isValid } from './src/utils/is_valid';
export { isNumber } from './src/utils/is_number';
export { jsonToQueryString } from './src/utils/json_to_query_string';
export { notifyMe } from './src/utils/notify_me';
export { queryStringToJson } from './src/utils/query_string_to_json';
export { reParseString } from './src/utils/re_parse_string';
export { resetString } from './src/utils/reset_string';
export { snakeToCamel } from './src/utils/snake_to_camel';
export { sniffId } from './src/utils/sniff_id';
export { _encrypt } from './src/utils/encrypt';
export { _decrypt } from './src/utils/decrypt';
export declare const WaelioUtils: () => {
    _cleanResponse: (response: object) => object;
    _equals: (arr: import("./src/utils/equals").equalsPayloadType, needle: import("./src/utils/equals").equalsPayloadType) => boolean;
    _hideRandom: (array: any[], difficulty?: number, replacement?: string) => any[];
    _repeat: (num: number) => (fn: Function) => void;
    _rotateArray: (array: string | number[]) => false | any[];
    _To: (promise: Promise<any>) => Promise<unknown>;
    _Get: (data: any) => any;
    a_or_an: (field: string) => "a" | "an";
    toBase64: (payload: string) => string;
    calculateClockDrift: (iatAccessToken: number, iatIdToken: number) => number;
    camelToSnake: (payload: string, hyphenated?: boolean) => string;
    generateId: (start?: number, len?: number) => string;
    isArray: (payload: any) => boolean;
    isObject: (payload: any) => boolean;
    isFunction: (payload: any) => boolean;
    isString: (payload: any) => boolean;
    isValid: (payload: string | number | object | []) => boolean;
    isNumber: (payload: any) => boolean;
    jsonToQueryString: (payload: {
        string: any;
    }) => string;
    notifyMe: (notification: string | {
        string: any;
    }, Site?: string) => void;
    queryStringToJson: (payload: string | {
        string: any;
    }, toObject?: boolean) => any;
    reParseString: (payload: string) => any;
    resetString: (payload: string) => string;
    snakeToCamel: (payload: string) => string;
    sniffId: (payload: any) => any;
    _encrypt: (salt: any, payload: any) => any;
    _decrypt: (salt: string, payload: any, asFunction?: boolean) => any;
};
declare const _default: () => {
    WaelioUtils: () => {
        _cleanResponse: (response: object) => object;
        _equals: (arr: import("./src/utils/equals").equalsPayloadType, needle: import("./src/utils/equals").equalsPayloadType) => boolean;
        _hideRandom: (array: any[], difficulty?: number, replacement?: string) => any[];
        _repeat: (num: number) => (fn: Function) => void;
        _rotateArray: (array: string | number[]) => false | any[];
        _To: (promise: Promise<any>) => Promise<unknown>;
        _Get: (data: any) => any;
        a_or_an: (field: string) => "a" | "an";
        toBase64: (payload: string) => string;
        calculateClockDrift: (iatAccessToken: number, iatIdToken: number) => number;
        camelToSnake: (payload: string, hyphenated?: boolean) => string;
        generateId: (start?: number, len?: number) => string;
        isArray: (payload: any) => boolean;
        isObject: (payload: any) => boolean;
        isFunction: (payload: any) => boolean;
        isString: (payload: any) => boolean;
        isValid: (payload: string | number | object | []) => boolean;
        isNumber: (payload: any) => boolean;
        jsonToQueryString: (payload: {
            string: any;
        }) => string;
        notifyMe: (notification: string | {
            string: any;
        }, Site?: string) => void;
        queryStringToJson: (payload: string | {
            string: any;
        }, toObject?: boolean) => any;
        reParseString: (payload: string) => any;
        resetString: (payload: string) => string;
        snakeToCamel: (payload: string) => string;
        sniffId: (payload: any) => any;
        _encrypt: (salt: any, payload: any) => any;
        _decrypt: (salt: string, payload: any, asFunction?: boolean) => any;
    };
    _cleanResponse: (response: object) => object;
    _equals: (arr: import("./src/utils/equals").equalsPayloadType, needle: import("./src/utils/equals").equalsPayloadType) => boolean;
    _hideRandom: (array: any[], difficulty?: number, replacement?: string) => any[];
    _repeat: (num: number) => (fn: Function) => void;
    _rotateArray: (array: string | number[]) => false | any[];
    _To: (promise: Promise<any>) => Promise<unknown>;
    _Get: (data: any) => any;
    a_or_an: (field: string) => "a" | "an";
    toBase64: (payload: string) => string;
    calculateClockDrift: (iatAccessToken: number, iatIdToken: number) => number;
    camelToSnake: (payload: string, hyphenated?: boolean) => string;
    generateId: (start?: number, len?: number) => string;
    isArray: (payload: any) => boolean;
    isObject: (payload: any) => boolean;
    isFunction: (payload: any) => boolean;
    isString: (payload: any) => boolean;
    isValid: (payload: string | number | object | []) => boolean;
    isNumber: (payload: any) => boolean;
    jsonToQueryString: (payload: {
        string: any;
    }) => string;
    notifyMe: (notification: string | {
        string: any;
    }, Site?: string) => void;
    queryStringToJson: (payload: string | {
        string: any;
    }, toObject?: boolean) => any;
    reParseString: (payload: string) => any;
    resetString: (payload: string) => string;
    snakeToCamel: (payload: string) => string;
    sniffId: (payload: any) => any;
    _encrypt: (salt: any, payload: any) => any;
    _decrypt: (salt: string, payload: any, asFunction?: boolean) => any;
};
export default _default;
